-- migration: 20240725120000_create_initial_schema.sql
-- description: Creates the initial database schema for flashcards and ai_suggestions.

--
-- custom types
--
create type flashcard_source as enum ('ai', 'manual');
create type suggestion_status as enum ('pending', 'accepted', 'rejected');

--
-- tables
--

-- table: flashcards
-- stores all active flashcards created by users.
create table flashcards (
    id uuid primary key default gen_random_uuid(),
    user_id uuid not null references auth.users(id) on delete cascade,
    front varchar(200) not null,
    back varchar(500) not null,
    source flashcard_source not null,
    leitner_box smallint not null default 1 check (leitner_box between 1 and 5),
    next_review_at timestamptz not null default now(),
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

-- Add unique constraint separately to avoid syntax error with lower() function
alter table flashcards add constraint flashcards_user_front_unique unique (user_id, front);

comment on table flashcards is 'Stores all active flashcards created by users.';
comment on column flashcards.id is 'Unique identifier for the flashcard.';
comment on column flashcards.user_id is 'Identifier of the user (owner) from the auth.users table.';
comment on column flashcards.front is 'Content of the front of the flashcard (question).';
comment on column flashcards.back is 'Content of the back of the flashcard (answer).';
comment on column flashcards.source is 'Source of the flashcard (ai or manual).';
comment on column flashcards.leitner_box is 'Box number in the Leitner system (1-5).';
comment on column flashcards.next_review_at is 'Date and time of the next scheduled review.';
comment on column flashcards.created_at is 'Date and time the record was created.';
comment on column flashcards.updated_at is 'Date and time the record was last modified.';


-- table: ai_suggestions
-- logs all flashcard suggestions generated by AI to track success metrics.
create table ai_suggestions (
    id uuid primary key default gen_random_uuid(),
    user_id uuid not null references auth.users(id) on delete cascade,
    batch_id uuid not null,
    source_text_hash varchar(64) not null,
    front_suggestion varchar(200) not null,
    back_suggestion varchar(500) not null,
    status suggestion_status not null default 'pending',
    created_at timestamptz not null default now()
);

comment on table ai_suggestions is 'Logs all flashcard suggestions generated by AI to track success metrics.';
comment on column ai_suggestions.id is 'Unique identifier for the suggestion.';
comment on column ai_suggestions.user_id is 'Identifier of the user for whom the suggestion was generated.';
comment on column ai_suggestions.batch_id is 'Group identifier to link suggestions from a single request.';
comment on column ai_suggestions.source_text_hash is 'SHA-256 hash of the original source text.';
comment on column ai_suggestions.front_suggestion is 'Suggested content for the front of the flashcard.';
comment on column ai_suggestions.back_suggestion is 'Suggested content for the back of the flashcard.';
comment on column ai_suggestions.status is 'Status of the user''s review of the suggestion.';
comment on column ai_suggestions.created_at is 'Date and time the suggestion was created.';

--
-- functions and triggers
--

-- function: handle_updated_at
-- automatically updates the updated_at column for a table.
create or replace function handle_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- trigger: on_flashcards_update
-- fires on flashcards update to set the updated_at column.
create trigger on_flashcards_update
before update on flashcards
for each row
execute procedure handle_updated_at();


--
-- indexes
--

-- index: idx_flashcards_user_next_review
-- improves performance for fetching flashcards due for review for a specific user.
create index idx_flashcards_user_next_review on flashcards (user_id, next_review_at);

-- index: idx_ai_suggestions_user_status
-- improves performance for finding suggestions pending review by a user.
create index idx_ai_suggestions_user_status on ai_suggestions (user_id, status);

-- index: idx_ai_suggestions_created_at
-- supports the cleanup job (ttl) for periodically deleting old, unverified suggestions.
create index idx_ai_suggestions_created_at on ai_suggestions (created_at);
--
-- row-level security (rls)
--

-- rls for flashcards table
alter table flashcards enable row level security;

create policy "allow authenticated users to read their own flashcards"
on flashcards for select
to authenticated
using (auth.uid() = user_id);

create policy "allow authenticated users to create their own flashcards"
on flashcards for insert
to authenticated
with check (auth.uid() = user_id);

create policy "allow authenticated users to update their own flashcards"
on flashcards for update
to authenticated
using (auth.uid() = user_id);

create policy "allow authenticated users to delete their own flashcards"
on flashcards for delete
to authenticated
using (auth.uid() = user_id);


-- rls for ai_suggestions table
alter table ai_suggestions enable row level security;

create policy "allow authenticated users to read their own suggestions"
on ai_suggestions for select
to authenticated
using (auth.uid() = user_id);

create policy "allow authenticated users to create their own suggestions"
on ai_suggestions for insert
to authenticated
with check (auth.uid() = user_id);

-- this policy allows the backend (using service_role) to insert suggestions.
-- service_role bypasses rls.
create policy "allow service_role to create suggestions"
on ai_suggestions for insert
to service_role
with check (true);

create policy "allow authenticated users to update their own suggestions"
on ai_suggestions for update
to authenticated
using (auth.uid() = user_id);
